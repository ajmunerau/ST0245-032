public int factorial(int n) {
    if (n == 1) return 1;
  return n * factorial(n-1);
}

public int fibonacci(int n) {
  if(n<2){
    return n;
    }else{
      return fibonacci(n-2)+fibonacci(n-1);
    }
  }
  
  public int sumDigits(int n) {
if(n < 10)
		return n;
	return sumDigits(n/10) + n%10;
}

public int powerN(int base, int n) {
  if(n == 1){
    return base;
  }else{
    return base*powerN(base, n-1);
  }
  
  public String allStar(String str) {
  	if(str.length() < 2)
  	return str;
  return str.charAt(0) + "*" + allStar(str.substring(1));
}

public boolean groupSum6(int start, int[] nums, int target) {
  if(target == 0 && start == nums.length){
    return true;
  }
  if(start == nums.length){
    return false;
  }
  if(nums[start] != 6 && !groupSum6(start +1, nums, target - nums[start])){
    return groupSum6(start +1, nums, target);
  }
  else if(nums[start] == 6){
    return groupSum6(start +1, nums, target -nums[start]);
  }
  else{
    return true;
  }
  
}

public boolean groupNoAdj(int start, int[] nums, int target) {
    if(target == 0 && start >= nums.length){
    return true;
  }
  if(start >= nums.length){
    return false;
  }
  if(!groupNoAdj(start +2, nums, target - nums[start])){
    return groupNoAdj(start +1, nums, target);
  }
  else{
    return true;
  }
}

public boolean groupSum5(int start, int[] nums, int target) {
    if(target == 0 && start == nums.length){
    return true;
  }
  if(start >= nums.length){
    return false;
  }
  if(!(nums[start] % 5 == 0) && !groupSum5(start +1, nums, target - nums[start])){
    return groupSum5(start +1, nums, target);
  }
  else if((nums[start] % 5 == 0) && (start < nums.length - 1) && (nums[start +1] == 1)){
    return groupSum5(start +2, nums, target -nums[start]);
  }
  else if(nums[start] % 5 == 0){
    return groupSum5(start +1, nums, target -nums[start]);
  }
  else{
    return true;
  }
}

public boolean s(int start, int[] nums, int a , int b) {
  if(start == nums.length){
    return a == b;
  }
  if(nums[start] %3 == 0){
    return s(start +1, nums, a + nums[start], b);
  }
  else if(nums[start] %5 == 0){
    return s(start +1, nums, a, b + nums[start]);
  }
  else if(!s(start +1, nums, a + nums[start], b)){
    return s(start +1, nums, a, b + nums[start]);
  }
  else{
    return true;
  }
}
public boolean split53(int [] nums){
  int a = 0;
  int b = 0; 
  return s(0, nums, a, b);
}

public class Punto1 {
    public static int nRectangulos(int n) {
        if (n < 3) {
            return n;
        } else {
            return nRectangulos(n - 1) + nRectangulos(n - 2);
        }
    }


    public static void main(String[] args) {
        int pruebas[] = {4, 5, 7, 3, 2, 8, 9};
        for (int i = 0; i < pruebas.length; i++) {
            System.out.println(nRectangulos(i));
        }
    }
}

public class Tiempo {

    public static int nRectangulos(int n) {
        if (n < 3) {
            return n;
        } else {
            return nRectangulos(n - 1) + nRectangulos(n - 2);
        }
    }


    public static void main(String[] args) {
        for (int b = 31; b < 51; b++) {
            long startTime = System.currentTimeMillis();
            nRectangulos(b);
            long tiempo = System.currentTimeMillis() - startTime;
            System.out.println( b + " "+tiempo);
        }
    }
}
